#include <assert.h>  
#include <stdio.h> 
#include <stdlib.h>  

struct Queue;
struct Queue* queue_make();
void queue_free(struct Queue* queue);
int queue_length(struct Queue* queue);
int queue_push_front(struct Queue* queue, int data);
int queue_push_back(struct Queue* queue, int data);
int queue_front(struct Queue* queue);
int queue_back(struct Queue* queue);
void queue_pop_front(struct Queue* queue);
void queue_pop_back(struct Queue* queue);
void queue_clear(struct Queue* queue);
void queue_print(struct Queue* queue);

/************************/

#define QUEUE_CAPACITY 100000 // one hundred thousand

struct Queue {
  int data[QUEUE_CAPACITY];
  int n;
};

struct Queue* queue_make() {
  struct Queue* queue;

  queue = malloc(sizeof(struct Queue));
  if (queue == NULL)
    return NULL;

  queue->n = 0;

  return queue;
}

void queue_free(struct Queue* queue) {
  assert(queue != NULL);
  free(queue);
}
  
int queue_length(struct Queue* queue) {
  assert(queue != NULL);
  return queue->n;
}

int queue_push_front(struct Queue* queue, int data) {
  int i;
  assert(queue != NULL);

  for (i = QUEUE_CAPACITY - 1; i > 0; i--)
    queue->data[i] = queue->data[i-1];

  queue->data[0] = data;

  queue->n++;

  return 1;
}

int queue_push_back(struct Queue* queue, int data) {
  assert(queue != NULL);
  assert(queue->n < QUEUE_CAPACITY);

  queue->data[queue->n] = data;
  queue->n++;

  return 1;
}

int queue_front(struct Queue* queue) {
  assert(queue != NULL);
  assert(queue_length(queue) > 0);

  return queue->data[0];
}

int queue_back(struct Queue* queue) {
  assert(queue != NULL);
  assert(queue_length(queue) > 0);

  return queue->data[queue->n - 1];
}

void queue_pop_front(struct Queue* queue) {
  int i;

  assert(queue != NULL);
  assert(queue_length(queue) > 0);

  for (i = 1; i < QUEUE_CAPACITY; i++)
    queue->data[i - 1] = queue->data[i];

  queue->n--;
}

void queue_pop_back(struct Queue* queue) {
  assert(queue != NULL);
  assert(queue_length(queue) > 0);

  queue->n--;
}

void queue_clear(struct Queue* queue) {
  assert(queue != NULL);

  queue->n = 0;
}

void queue_print(struct Queue* queue) {
  int i;

  assert(queue != NULL);

  printf("queue:");

  for (i = 0; i < queue->n; i++)
    printf(" %i", queue->data[i]);

  printf("\n");
}

/***************************/

int main(void) 
{
  struct Queue* queue;
  int ok, i;
  queue = queue_make();
  assert(queue != NULL);
  assert(queue_length(queue) == 0);
  queue_print(queue);
  ok = queue_push_front(queue, 1);
  assert(ok);
  assert(queue_length(queue) == 1);
  assert(queue_front(queue) == 1);
  assert(queue_back(queue) == 1);
  queue_print(queue);

  ok = queue_push_front(queue, 2);
  assert(ok);
  assert(queue_length(queue) == 2);
  assert(queue_front(queue) == 2);
  assert(queue_back(queue) == 1);
  queue_print(queue);

  ok = queue_push_back(queue, 3);
  assert(ok);
  assert(queue_length(queue) == 3);
  assert(queue_front(queue) == 2);
  assert(queue_back(queue) == 3);
  queue_print(queue);

  ok = queue_push_back(queue, 4);
  assert(ok);
  assert(queue_length(queue) == 4);
  assert(queue_front(queue) == 2);
  assert(queue_back(queue) == 4);
  queue_print(queue);

  ok = queue_push_front(queue, 5);
  assert(ok);
  assert(queue_length(queue) == 5);
  assert(queue_front(queue) == 5);
  assert(queue_back(queue) == 4);
  queue_print(queue);

  queue_pop_back(queue);
  assert(queue_length(queue) == 4);
  assert(queue_front(queue) == 5);
  assert(queue_back(queue) == 3);
  queue_print(queue);
  
  queue_pop_back(queue);
  assert(queue_length(queue) == 3);
  assert(queue_front(queue) == 5);
  assert(queue_back(queue) == 1);
  queue_print(queue);

  queue_pop_back(queue);
  assert(queue_length(queue) == 2);
  assert(queue_front(queue) == 5);
  assert(queue_back(queue) == 2);
  queue_print(queue);

  queue_pop_front(queue);
  assert(queue_length(queue) == 1);
  assert(queue_front(queue) == 2);
  assert(queue_back(queue) == 2);
  queue_print(queue);

  queue_pop_front(queue);
  assert(queue_length(queue) == 0);
  queue_print(queue);
  printf("30k stress test...\n");
  for (i = 0; i < 30000; i++) {
    queue_push_front(queue, i);
    assert(queue_front(queue) == i);
    assert(queue_back(queue) == 0);
  }
  assert(queue_length(queue) == 30000);

  queue_clear(queue);
  assert(queue_length(queue) == 0);

  /* Severe stress test: add 1 million elements. The array
     implementation will crash here, but the list implementation
     should work, if slowly. */

  printf("1M stress test...\n");

  for (i = 0; i < 1000000; i++) {
    queue_push_back(queue, i);
    assert(queue_front(queue) == 0);
    assert(queue_back(queue) == i);
  }
  assert(queue_length(queue) == 1000000);

  /* Free the queue. */
  queue_free(queue);

  return 0;
}
